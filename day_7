# -*- coding: utf-8 -*-
"""
Created on Mon Dec 30 14:21:42 2024

@author: Hanse
"""

import os
import itertools
#import numpy as np

new_dir = "C:/Users/Hanse/Desktop/aoc2024/day_7"
os.chdir(new_dir)

#create list of lists representing equations
eqlist = []

with open('input.txt') as df:
    dlist = df.read().splitlines()
eqdata = [dstring.split(': ') for dstring in dlist]

#debug case first entry
#eqdata = eqdata[:2]

#debug case
# eqdata = [[190, '10 19'],
#           [3267,'81 40 27'], 
#           [83,'17 5'],
#           [156,'15 6'],
#           [7290,'6 8 6 15'],
#           [161011,'16 10 13'], 
#           [192,'17 8 14'], 
#           [21037,'9 7 18 13'],
#           [292,'11 6 16 20']
#           ]

eqlen = len(eqdata)

oplist = []

#recursive calc, assumes length of oplist is 1 less than nlist
def rcalc(nlist, oplist, flag):
    nlen = len(nlist)
    olen = len(oplist)
    
    if olen != nlen-1:
        return 0
        
    if flag == 0:
        if olen == 1:
            if oplist[0] == 0:
                return nlist[0] + nlist[1]
            else: # oplist[0] == 1
                return nlist[0] * nlist[1]
        else:
            if oplist[-1] == 0:
                return rcalc(nlist[:-1],oplist[:-1],0) + nlist[-1]
            else: # ouplist[-1] == 1
                return rcalc(nlist[:-1],oplist[:-1],0) * nlist[-1]

    if flag == 1:
        if olen == 1:
            if oplist[0] == 0: 
                return nlist[0] + nlist[1]
            elif oplist[0] == 1:
                return nlist[0] * nlist[1]
            else:
                return int(str(nlist[0]) + str(nlist[1]))
            
        else:
            if oplist[-1] == 0: 
                return rcalc(nlist[:-1],oplist[:-1],1) + nlist[-1]
            elif oplist[-1] == 1:
                return rcalc(nlist[:-1],oplist[:-1],1) * nlist[-1]
            else:
                return int(str(rcalc(nlist[:-1],oplist[:-1],1))+str(nlist[-1]))

def getbit(value, bitnum):
    mask = 1 << bitnum
    return(value & mask) >> bitnum

eqlist = []
binlist = []
terlist = []

for i in range(eqlen):
    eqlist.append([int(eqdata[i][0]), [int(x) for x in eqdata[i][1].split()]])
    nlen = len(eqlist[i][1])-1
    
    bitlist = [[getbit(m, n) for n in range(nlen)] for m in range(2**nlen)]
    for blist in bitlist:
        binlist.append([eqlist[i][0], rcalc(eqlist[i][1], blist,0),i,blist])

    ilist = [0,1,2]
    permlist = list(itertools.product(ilist, repeat=nlen))
    for tlist in permlist: 
        terlist.append([eqlist[i][0], rcalc(eqlist[i][1], tlist,1),i,tlist])

binlist = [z[0] for z in binlist if z[0] == z[1]]
terlist = [db[0] for db in terlist if db[0] == db[1]]

#remove duplicate items by converting to set, then convert back to list
binset = list(set(binlist))
terset = list(set(terlist))

#print(outset)
print(sum(binlist),sum(binset))
print(sum(terlist),sum(terset))
